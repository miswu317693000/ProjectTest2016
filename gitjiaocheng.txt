教程：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c01

      https://git-scm.com/book/zh/ch2-5.html#查看远程仓库


git config --global user.name "mis wu" 
git config --global user.email hdwb_sh@126.com

mkdir 文件名称   （创建文件夹）
cd 文件名称      （cd是进入文件夹）
cd ..             (回到上一级目录)
pwd              （显示文件夹路径）
/Users/michael/learngit   （路径）

通过git init命令把这个目录变成Git可以管理的仓库：

touch readme.txt(文件名称)-------------自动创建文件------------------------------------

用命令git add告诉Git，把文件添加到仓库：
 git add readme.txt

用命令git commit告诉Git，把文件提交到仓库：
git commit -m "wrote a readme file"
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。

$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

小结：
现在总结一下今天学的两点内容：
初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
第二步，使用命令git commit，完成。

git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。

虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看：
git add readme.txt

git status告诉我们，将要被提交的修改包括readme.txt，下一步，就可以放心地提交了：
提交后，我们再用git status命令看看仓库的当前状态：

$ git status
# On branch master
nothing to commit (working directory clean)
Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working directory clean）的。

小结

要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

------------------------------------------------------------------
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit. 
# On branch master 
# Changes to be committed: 
# modified: index.html 
# deleted: style.css
出现这种#页面：输入 :wq 保存并退出。
------------------------------------------------------------------

git log命令显示从最近到最远的提交日志，可以试试加上--pretty=oneline参数

需要友情提示的是，你看到的一大串类似3628164...882e1e0的是commit id（版本号）

用HEAD表示当前版本,上一个版本就是HEAD^，上上一个版本就是HEAD^^
当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 (也可以用HEAD~1、2...100)

$ git reset --hard HEAD^   （具体命令写法）

如果在想回到之前的版本，找到commit id 于是就可以指定回到未来的某个版本：
$ git reset --hard 3628164

如果第二天还想再回到之前的版本：
Git提供了一个命令git reflog用来记录你的每一次命令：

$ git reflog
ea34578 HEAD@{0}: reset: moving to HEAD^
3628164 HEAD@{1}: commit: append GPL
ea34578 HEAD@{2}: commit: add distributed
cb926e7 HEAD@{3}: commit (initial): wrote a readme file
可以看到操作的记录，找到commit id 再指定回到版本就可以了。


工作区和暂存区：（详细见图）-------------------------------------------------------------------------------

第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。

你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
（可以理解为购物车）


用git diff HEAD -- readme.txt命令可以查看工作区和版本库（分支）里面最新版本的区别：


git diff：是查看工作区与暂存区 对比。
git diff --cached：是查看暂存区与分支的对比。
git diff HEAD：是查看工作区和分支的对比。


撤销修改：-------------------------------------------------------------------------------
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。(-- 和 file 之间加空格)

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。



用rm命令删了：现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit

命令git rm用于删除一个文件。
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。



--------------------------------查看远程仓库------------------------------------

如果想要查看某一个远程仓库的更多信息，可以使用 git remote show [remote-name] 命令。



-----------------------------------------------------------------
$ git fetch [remote-name]
这个命令会访问远程仓库，从中拉取所有你还没有的数据。执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。



-------------------------------Git中从远程的分支获取最新的版本到本地有这样2个命令---------------------------------

1. git fetch：相当于是从远程获取最新版本到本地，不会自动merge
    
git fetch origin master
git log -p master..origin/master
git merge origin/master

    以上命令的含义：
   首先从远程的origin的master主分支下载最新的版本到origin/master分支上
   然后比较本地的master分支和origin/master分支的差别
   最后进行合并
   上述过程其实可以用以下更清晰的方式来进行：
 git fetch origin master:tmp
git diff tmp 
git merge tmp

    从远程获取最新的版本到本地的test分支上
   之后再进行比较合并

2. git pull：相当于是从远程获取最新版本并merge到本地
 git pull origin master

上述命令其实相当于git fetch 和 git merge
在实际使用中，git fetch更安全一些
因为在merge前，我们可以查看更新情况，然后再决定是否合并
结束
---------------------------------------------------------------------------------------------------------------



git@github.com:miswu317693000/ProjectTest2016.git





  









